import { NgModule } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { readFirst } from '@nrwl/nx/testing';

import { EffectsModule } from '@ngrx/effects';
import { StoreModule, Store } from '@ngrx/store';

import { NxModule } from '@nrwl/nx';

import { <%= className %>Effects } from './<%= fileName %>.effects';
import { <%= className %>Facade } from './<%= fileName %>.facade';

import { <%= propertyName %>Query } from './<%= fileName %>.selectors';
import { Load<%= className %>, <%= className %>Loaded } from './<%= fileName %>.actions';
import {
  <%= className %>State,
  Entity,
  initialState,
  <%= propertyName %>Reducer
} from './<%= fileName %>.reducer';

interface TestSchema {
  '<%= propertyName %>' : <%= className %>State
}

describe('<%= className %>Facade', () => {
  let facade: <%= className %>Facade;
  let store: Store<TestSchema>;
  let create<%= className %>;

  beforeEach(() => {
    create<%= className %> = ( id:string, name = '' ): Entity => ({
       id,
       name: name || `name-${id}`
    });
  });

  describe('used in NgModule', () => {

    beforeEach(() => {
      @NgModule({
        imports: [
          StoreModule.forFeature('<%= propertyName %>', <%= propertyName %>Reducer, { initialState }),
          EffectsModule.forFeature([<%= className %>Effects])
        ],
        providers: [<%= className %>Facade]
      })
      class CustomFeatureModule {}

      @NgModule({
        imports: [
          NxModule.forRoot(),
          StoreModule.forRoot({}),
          EffectsModule.forRoot([]),
          CustomFeatureModule,
        ]
      })
      class RootModule {}
      TestBed.configureTestingModule({ imports: [RootModule] });

      store = TestBed.get(Store);
      facade = TestBed.get(<%= className %>Facade);
    });

    describe('all<%= className %>$', () => {
      it('should return an empty list as initial value', async () => {
        const list = await readFirst(facade.all<%= className %>$);

        expect(list.length).toBe(0);
      });
    });

    describe('loaded$', () => {
      it('should return false as initial value', async () => {
        const isLoaded = await readFirst(facade.loaded$);

        expect(isLoaded).toBe(false);
      });
    });

    /**
     * The initially generated facade::loadAll() returns empty array
     */
    describe('loadAll()', () => {
      beforeEach(() => {
        facade.loadAll();
      });

      it('should result in an empty list', async () => {
        const list = await readFirst(facade.all<%= className %>$);

        expect(list.length).toBe(0);
      });

      it('should result in loaded == true', async () => {
        const isLoaded = await readFirst(facade.loaded$);

        expect(isLoaded).toBe(true);
      });
    });

    /**
     * Use `<%= className %>Loaded` to manually submit list for state management
     */
    describe('dis', () => {

    });
    it('<%= className %>Loaded$ should return the loaded list; and loaded flag == true', async () => {
    it('all<%= className %>$ should return the loaded list; and loaded flag == true', async () => {
      let list = await readFirst(facade.all<%= className %>$);
      let isLoaded = await readFirst(facade.loaded$);

      expect(list.length).toBe(0);
      expect(isLoaded).toBe(false);

      store.dispatch(new <%= className %>Loaded([
        create<%= className %>('AAA'),
        create<%= className %>('BBB')
      ]));

      list = await readFirst(facade.all<%= className %>$);
      isLoaded = await readFirst(facade.loaded$);

      expect(list.length).toBe(2);
      expect(isLoaded).toBe(true);
    });
  });

});
